/*
 * Copyright (C) 2011-2021 Intel Corporation. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *   * Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in
 *     the documentation and/or other materials provided with the
 *     distribution.
 *   * Neither the name of Intel Corporation nor the names of its
 *     contributors may be used to endorse or promote products derived
 *     from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

/* Enclave.edl - Top EDL file. */

enclave {
    
from "sgx_tsgxssl.edl" import *;
from "sgx_pthread.edl" import *;
    /* 
     * ocall_uprint - invokes OCALL to display string buffer inside the enclave.
     *  [in]: copy the string buffer to App outside.
     *  [string]: specifies 'str' is a NULL terminated buffer.
     */
    untrusted {
        void ocall_uprint([in, string] const char *str);
    };


    trusted {
        public void send_comm([in, size=r1len] uint8_t *r1, size_t r1len,
                              [in, size=r2len] uint8_t *r2, size_t r2len,
                              [in, size=r3len] uint8_t *r3, size_t r3len,
                              [in, size=y1len] uint8_t *y1, size_t y1len,
                              [in, size=y2len] uint8_t *y2, size_t y2len,
                              [in, size=y3len] uint8_t *y3, size_t y3len);
        public void send_dp([in, size=plen] uint8_t* p, size_t plen,
                            [in, size=alen] uint8_t* a, size_t alen,
                            [in, size=blen] uint8_t* b, size_t blen,
                            [in, size=gxlen] uint8_t* gx, size_t gxlen,
                            [in, size=gylen] uint8_t* gy, size_t gylen,
                            [in, size=orderlen] uint8_t* order, size_t orderlen,
                            [in, size=cofactorlen] uint8_t* cofactor, size_t cofactorlen);

        public void request_PK1([out] uint8_t y1[256], [out] size_t* y1len,
                                [out] uint8_t r1[256], [out] size_t* r1len,
                                size_t counter);
        public void request_PK2([out] uint8_t y2[256], [out] size_t* y2len,
                                [out] uint8_t r2[256], [out] size_t* r2len,
                                size_t counter);
        public void request_PK3([out] uint8_t y3[256], [out] size_t* y3len,
                                [out] uint8_t r3[256], [out] size_t* r3len,
                                size_t counter);
    };
};
